"use client";

import { useFlowStore } from "@/store/flowStore";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Trash2, Settings, X } from "lucide-react";

export default function NodeConfigPanel() {
  const { selectedNode, updateNodeConfig, deleteSelectedNode } = useFlowStore();

  if (!selectedNode) {
    return (
      <aside className="w-80 h-full bg-background border-l border-border flex flex-col">
        <div className="p-6 border-b border-border">
          <h3 className="text-lg font-semibold text-foreground">Node Configuration</h3>
          <p className="text-sm text-muted-foreground mt-1">
            Select a node to edit its configuration
          </p>
        </div>
        <div className="flex-1 flex items-center justify-center p-6">
          <div className="text-center">
            <Settings className="h-12 w-12 text-muted-foreground/50 mx-auto mb-4" />
            <p className="text-sm text-muted-foreground">No node selected</p>
          </div>
        </div>
      </aside>
    );
  }

  const handleChange = (field, value) => {
    updateNodeConfig(selectedNode.id, { [field]: value });
  };

  return (
    <aside className="w-80 h-full bg-background border-l border-border flex flex-col">
      {/* Header */}
      <div className="p-6 border-b border-border">
        <div className="flex items-center justify-between mb-2">
          <h3 className="text-lg font-semibold text-foreground">
            {selectedNode.type === "apiCall"
              ? "API Call"
              : selectedNode.type === "condition"
              ? "Condition"
              : selectedNode.type === "delay"
              ? "Delay"
              : "Python Script"}
          </h3>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 text-muted-foreground hover:text-foreground"
            onClick={deleteSelectedNode}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
        <p className="text-sm text-muted-foreground">
          Configure node settings and parameters
        </p>
      </div>

      {/* Content */}
      <ScrollArea className="flex-1">
        <div className="p-6 space-y-6">
          {/* Delete Button */}
          <div className="flex justify-end">
            <Button
              variant="destructive"
              size="sm"
              onClick={deleteSelectedNode}
              className="flex items-center gap-2"
            >
              <Trash2 className="h-4 w-4" />
              Delete Node
            </Button>
          </div>

          <Separator />

          {/* API Call Configuration */}
          {selectedNode.type === "apiCall" && (
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="url">API URL</Label>
                <Input
                  id="url"
                  placeholder="https://api.example.com/endpoint"
                  value={selectedNode.data?.url || ""}
                  onChange={(e) => handleChange("url", e.target.value)}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="method">HTTP Method</Label>
                <Select
                  value={selectedNode.data?.method || "GET"}
                  onValueChange={(value) => handleChange("method", value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select method" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="GET">GET</SelectItem>
                    <SelectItem value="POST">POST</SelectItem>
                    <SelectItem value="PUT">PUT</SelectItem>
                    <SelectItem value="DELETE">DELETE</SelectItem>
                    <SelectItem value="PATCH">PATCH</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}

          {/* Condition Configuration */}
          {selectedNode.type === "condition" && (
            <div className="space-y-2">
              <Label htmlFor="condition">Condition Expression</Label>
              <Input
                id="condition"
                placeholder="e.g., value > 10"
                value={selectedNode.data?.condition || ""}
                onChange={(e) => handleChange("condition", e.target.value)}
              />
              <p className="text-xs text-muted-foreground">
                Use JavaScript-like expressions
              </p>
            </div>
          )}

          {/* Delay Configuration */}
          {selectedNode.type === "delay" && (
            <div className="space-y-2">
              <Label htmlFor="duration">Duration (seconds)</Label>
              <Input
                id="duration"
                type="number"
                placeholder="5"
                value={selectedNode.data?.duration || ""}
                onChange={(e) =>
                  handleChange("duration", parseFloat(e.target.value) || 0)
                }
              />
              <p className="text-xs text-muted-foreground">
                How long to wait before continuing
              </p>
            </div>
          )}

          {/* Python Code Configuration */}
          {selectedNode.type === "python" && (
            <div className="space-y-2">
              <Label htmlFor="code">Python Code</Label>
              <Textarea
                id="code"
                placeholder="# Write Python code here"
                value={selectedNode.data?.code || ""}
                onChange={(e) => handleChange("code", e.target.value)}
                className="h-40 font-mono text-sm"
              />
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Footer */}
      <div className="p-6 border-t border-border flex gap-2">
        <Button variant="outline" size="sm" className="flex-1">
          Reset
        </Button>
        <Button size="sm" className="flex-1">
          Save Changes
        </Button>
      </div>
    </aside>
  );
}
